     1                                  ; Se dau cuvintele A si B. Se cere cuvantul C format astfel:
     2                                  ;- bitii 0-2 ai lui C coincid cu bitii 10-12 ai lui B
     3                                  ;- bitii 3-6 ai lui C au valoarea 1
     4                                  ;- bitii 7-10 ai lui C coincid cu bitii 1-4 ai lui A
     5                                  ;- bitii 11-12 ai valoarea 0
     6                                  ;- bitii 13-15 ai lui C concid cu inverul bitilor 9-11 ai lui B
     7                                  
     8                                  ; Vom obtine cuvantul C prin operatii succesive de "izolare". Numim operatia
     9                                  ; de izolare a bitilor 10-12 ai lui B, pastrarea intacta a valorii acestor
    10                                  ; biti, si initializarea cu 0 a celorlalti biti. Operatiunea de izolare se
    11                                  ; realizeaza cu ajutorul operatorului and intre cuvantul B si masca
    12                                  ; 0001110000000000. Odata bitii izolati, printr-o operatie de rotire se
    13                                  ; deplaseaza grupul de biti doriti in pozitia dorita. Cuvantul final se
    14                                  ; obtine prin aplicarea operatorului or intre rezultatele intermediare
    15                                  ; obtinute in urma izolarii si rotirii.
    16                                  ; Observatie: rangul bitilor se numara de la dreapta la stanga
    17                                  
    18                                  bits 32 ;asamblare si compilare pentru arhitectura de 32 biti
    19                                  ; definim punctul de intrare in programul principal
    20                                  global  start 
    21                                  
    22                                  extern  exit ; indicam asamblorului ca exit exista, chiar daca noi nu o vom defini
    23                                  import  exit msvcrt.dll; exit este o functie care incheie procesul, este definita in msvcrt.dll
    24                                          ; msvcrt.dll contine exit, printf si toate celelalte functii C-runtime importante
    25                                  segment  data use32 class=data ; segmentul de date in care se vor defini variabilele 
    26 00000000 5777                         a dw 0111011101010111b
    27 00000002 BE9B                         b dw 1001101110111110b
    28 00000004 0000                         c dw 0
    29                                       ; c = ib11 ib10 ib9 0 0 a4 a3 a2    a1 1 1 1 1 b12 b11 b10
    30                                  segment  code use32 class=code ; segmentul de cod
    31                                  start: 
    32                                  
    33 00000000 66BB0000                     mov  bx, 0 ; in registrul bx vom calcula rezultatul
    34                                  
    35 00000004 66A1[02000000]               mov  ax, [b] ; izolam bitii 10-12 ai lui b
    36 0000000A 6625001C                     and  ax, 0001110000000000b   ; ax = 0 0 0 b12     b11 b10 0 0     0 0 0 0    0 0 0 0
    37 0000000E B10A                         mov  cl, 10
    38 00000010 66D3C8                       ror  ax, cl ; rotim 10 pozitii spre dreapta    ax = 0 0 0 0   0 0 0 0    0 0 0 0    0 b12 b11 b10
    39 00000013 6609C3                       or   bx, ax ; punem bitii in rezultat       bx = 0 0 0 0   0 0 0 0    0 0 0 0    0 b12 b11 b10
    40                                  
    41 00000016 6683CB78                     or   bx, 0000000001111000b ; facem biti 3-6 din rezultat sa aiba valoarea 1     bx = 0 0 0 0   0 0 0 0   0 1 1 1   1 b12 b11 10
    42                                  
    43 0000001A 66A1[00000000]               mov  ax, [a] ; izolam biti 1-4 ai lui a    
    44 00000020 6683E01E                     and  ax, 0000000000011110b     ; ax = 0 0 0 0   0 0 0 0    0 0 0 a4   a3 a2 a1 0
    45 00000024 B106                         mov  cl, 6
    46 00000026 66D3C0                       rol  ax, cl ; rotim 6 pozitii spre stanga    ax = 0 0 0 0  0 a4 a3 a2   a1 0 0 0   0 0 0 0
    47 00000029 6609C3                       or   bx, ax ; punem bitii in rezultat        bx = 0 0 0 0  0 a4 a3 a2   a1 1 1 1   1 b12 b11 b10
    48                                  
    49 0000002C 6681E3FFE7                   and  bx, 1110011111111111b ; facem biti 11-12 din rezultat sa aiba valoarea 0
    50                                  
    51 00000031 66A1[02000000]               mov  ax, [b]
    52 00000037 66F7D0                       not  ax ; inversam valoarea lui b   
    53 0000003A 6625000E                     and  ax, 0000111000000000b ; izolam biti 9-11 ai lui b   ax = 0 0 0 0  ib11 ib10 ib9 0   0 0 0 0   0 0 0 0
    54 0000003E B104                         mov  cl, 4
    55 00000040 66D3C0                       rol  ax, cl ; deplasam biti 4 pozitii spre stanga    ax = ib11 ib10 ib9 0   0 0 0 0   0 0 0 0   0 0 0 0
    56 00000043 6609C3                       or   bx, ax ; punem biti in rezultat      bx = ib11 ib10 ib9 0   0 a4 a3 a2   a1 1 1 1   1 b12 b11 b10
    57                                  
    58 00000046 66891D[04000000]             mov  [c], bx ; punem valoarea din registru in variabila rezultat
    59                                  
    60 0000004D 6A00                         push dword 0 ;se pune pe stiva codul de retur al functiei exit
    61 0000004F FF15[00000000]               call [exit] ;apelul functiei sistem exit pentru terminarea executiei programului	
