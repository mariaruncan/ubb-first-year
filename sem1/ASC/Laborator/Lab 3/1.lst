     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a - byte, b - word, c - double word, d - qword - Interpretare fara semn
    14 00000000 01                          a DB 1
    15 00000001 0300                        b DW 3
    16 00000003 05000000                    c DD 5
    17 00000007 0A00000000000000            d DQ 10
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; (d+c) - (c+b) - (b+a)
    23 00000000 A1[03000000]                    MOV EAX, [c]
    24 00000005 BA00000000                      MOV EDX, 0           ;  EDX:EAX=c
    25 0000000A 0305[07000000]                  ADD EAX, dword [d]
    26 00000010 1315[0B000000]                  ADC EDX, dword [d+4] ;  EDX:EAX=c+d
    27                                          
    28 00000016 BB00000000                      MOV EBX, 0
    29 0000001B 668B1D[01000000]                MOV BX, [b]          ;  EBX=b
    30 00000022 031D[03000000]                  ADD EBX, [c]         ;  EBX=b+c
    31 00000028 B900000000                      MOV ECX,0            ;  ECX:EBX=b+c
    32                                          
    33 0000002D 29D8                            SUB EAX, EBX
    34 0000002F 19CA                            SBB EDX, ECX         ;  EDX:EAX=(d+c)-(c+b)
    35                                          
    36 00000031 66B90000                        MOV CX, 0
    37 00000035 8A0D[00000000]                  MOV CL, [a]          ;  CX=a
    38 0000003B 66030D[01000000]                ADD CX, [b]          ;  CX=a+b
    39 00000042 BB00000000                      MOV EBX, 0
    40 00000047 6689CB                          MOV BX, CX           ;  EBX=a+b
    41 0000004A B900000000                      MOV ECX, 0           ;  ECX:EBX=a+b
    42                                          
    43 0000004F 29D8                            SUB EAX, EBX
    44 00000051 19CA                            SBB EDX, ECX         ;  EDX:EAX=EDX:EAX-ECX:EBX=(d+c)-(c+b)-(b+a)
    45                                          ; exit(0)
    46 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
