     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a,b,c-byte; e-doubleword; x-qword
    14 00000000 04                          a DB 4
    15 00000001 06                          b DB 6
    16 00000002 01                          c DB 1
    17 00000003 03000000                    e DD 3
    18 00000007 0500000000000000            x DQ 5
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; a/2+b*b-a*b*c+e+x=22 fara semn
    24                                          
    25 00000000 A0[00000000]                    MOV AL, [a]
    26 00000005 B400                            MOV AH, 0       ; AX=a
    27 00000007 B302                            MOV BL, 2
    28 00000009 F6F3                            DIV BL          ; AL=a/2
    29 0000000B 88C3                            MOV BL, AL      ; BL=a/2
    30 0000000D B700                            MOV BH, 0       ; BX=a/2
    31                                          
    32 0000000F A0[01000000]                    MOV AL, [b]
    33 00000014 F6E0                            MUL AL          ; AX=b*b
    34                                          
    35 00000016 6601C3                          ADD BX, AX      ; BX=a/2+b*b
    36 00000019 66B90000                        MOV CX, 0       ; CX:BX=a/2+b*b
    37                                          
    38 0000001D A0[00000000]                    MOV AL, [a]     ; AL=a
    39 00000022 F625[01000000]                  MUL byte [b]    ; AX=a*b
    40 00000028 8A15[02000000]                  MOV DL, [c]
    41 0000002E B600                            MOV DH, 0       ; DX=c
    42 00000030 66F7E2                          MUL DX          ; DX:AX=a*b*c
    43                                          
    44 00000033 6629C3                          SUB BX, AX
    45 00000036 6619D1                          SBB CX, DX      ; BX:CX=a/2+b*b-a*b*c
    46                                          
    47 00000039 66030D[03000000]                ADD CX, word [e]
    48 00000040 66131D[05000000]                ADC BX, word [e+2] ; BX:CX=a/2+b*b-a*b*c-e
    49                                          
    50 00000047 6653                            PUSH BX
    51 00000049 6651                            PUSH CX
    52 0000004B 58                              POP EAX         ; EAX=a/2+b*b-a*b*c-e
    53 0000004C BA00000000                      MOV EDX, 0      ; EDX:EAX=a/2+b*b-a*b*c-e
    54                                          
    55 00000051 2B05[07000000]                  SUB EAX, dword[x]
    56 00000057 1B15[0B000000]                  SBB EDX, dword[x+4] ; EDX:EAX=a/2+b*b-a*b*c-e-x
    57                                          
    58                                          ; exit(0)
    59 0000005D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 0000005F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
