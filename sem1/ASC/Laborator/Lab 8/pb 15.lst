     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; Sa se citeasca de la tastatura doua numere a si b (in baza 10) si sa se calculeze a+b. Sa se afiseze rezultatul adunarii in baza 16.
    16 00000000 613D00                      mesaj_a db "a=", 0
    17 00000003 623D00                      mesaj_b db "b=", 0
    18 00000006 256400                      format1 db "%d", 0
    19 00000009 73756D61206E756D65-         format2 db "suma numerelor a si b este:%x", 0 
    19 00000012 72656C6F7220612073-
    19 0000001B 69206220657374653A-
    19 00000024 257800             
    20 00000027 <res 00000004>              a resd 1
    21 0000002B <res 00000004>              b resd 1
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;afisare "a="
    27 00000000 68[00000000]                    push dword mesaj_a
    28 00000005 FF15[00000000]                  call[printf]
    29 0000000B 83C404                          add esp, 4*1
    30                                          
    31                                          ; citire a
    32 0000000E 68[27000000]                    push dword a        ; punem pe stiva adresa lui a
    33 00000013 68[06000000]                    push dword format1
    34 00000018 FF15[00000000]                  call[scanf]
    35 0000001E 83C408                          add esp, 4*2
    36                                          
    37                                          ; afisare "b="
    38 00000021 68[03000000]                    push dword mesaj_b
    39 00000026 FF15[00000000]                  call[printf]
    40 0000002C 83C404                          add esp, 4*1
    41                                          
    42                                          ; citire b
    43 0000002F 68[2B000000]                    push dword b        ; punem pe stiva adresa lui b
    44 00000034 68[06000000]                    push dword format1
    45 00000039 FF15[00000000]                  call[scanf]
    46 0000003F 83C408                          add esp, 4*2
    47                                          
    48                                          ; suma a+b
    49 00000042 A1[27000000]                    mov eax, dword[a]
    50 00000047 0305[2B000000]                  add eax, dword[b]
    51                                          
    52                                          ; afisare suma
    53 0000004D 50                              push eax
    54 0000004E 68[09000000]                    push format2
    55 00000053 FF15[00000000]                  call[printf]
    56 00000059 83C408                          add esp, 4*2
    57                                          
    58                                      
    59                                          ; exit(0)
    60 0000005C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 0000005E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
