     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fprintf, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; Se dau un nume de fisier si un text (definite in segmentul de date). Textul contine litere mici, litere mari, cifre si caractere speciale. Sa se transforme toate literele mari din textul dat in litere mici. Sa
    17 00000000 7472616E73666F726D-         nume_fisier db "transformare.txt", 0
    17 00000009 6172652E74787400   
    18 00000011 7700                        mod_acces db "w", 0
    19 00000013 61772A67373F463671-         text db "aw*g7?F6q!", 0
    19 0000001C 2100               
    20                                      len equ $-text
    21 0000001E FFFFFFFF                    descriptor_fisier dd -1
    22 00000022 <res 00000001>              aux resb 1
    23                                      
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; deschidere fisier
    29 00000000 68[11000000]                    push dword mod_acces
    30 00000005 68[00000000]                    push dword nume_fisier
    31 0000000A FF15[00000000]                  call [fopen]
    32 00000010 83C408                          add ESP, 4*2
    33                                          
    34 00000013 A3[1E000000]                    mov [descriptor_fisier], EAX    ; salvam valoarea returnata de fopen
    35                                          
    36 00000018 83F800                          cmp EAX, 0
    37 0000001B 7453                            je Final                        ; daca fisierul nu a fost deschis cu succes, sarim la Final
    38                                          
    39 0000001D B90B000000                      mov ECX, len
    40 00000022 E34C                            jecxz Final                     ; daca nu exista caractere in text, sarim la final
    41                                          
    42 00000024 BE[13000000]                    mov ESI, text
    43 00000029 FC                              cld                             ; DF=0, stanga->dreapta
    44                                          
    45                                          ; transformare litere mici in litere mari
    46                                          Bucla:
    47 0000002A 51                                  push ECX                    ; salvam valoarea lui ECX deoarece se modifica la apelarea functiei fprintf
    48 0000002B AC                                  lodsb
    49 0000002C A2[22000000]                        mov [aux], AL
    50                                              
    51 00000031 803D[22000000]61                    cmp byte[aux], 'a'
    52 00000038 7210                                jb Pass
    53 0000003A 803D[22000000]7A                    cmp byte[aux], 'z'
    54 00000041 7707                                ja Pass
    55 00000043 8005[22000000]E0                    add byte[aux], 'A'-'a'
    56                                              
    57                                              Pass:
    58 0000004A 68[22000000]                        push dword aux
    59 0000004F FF35[1E000000]                      push dword [descriptor_fisier]
    60 00000055 FF15[00000000]                      call [fprintf]
    61 0000005B 83C408                              add ESP, 4*2
    62                                              
    63 0000005E 59                                  pop ECX
    64 0000005F E2C9                            loop Bucla
    65                                          
    66                                          ;inchidere fisier
    67 00000061 FF35[1E000000]                  push dword [descriptor_fisier]
    68 00000067 FF15[00000000]                  call [fclose]
    69 0000006D 83C404                          add ESP, 4
    70                                          
    71                                          Final:
    72                                      
    73                                          ; exit(0)
    74 00000070 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 00000072 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
