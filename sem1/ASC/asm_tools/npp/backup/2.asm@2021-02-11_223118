bits 32
global start
extern exit,printf               
import exit msvcrt.dll 
import printf msvcrt.dll    

segment data use32 class=data
   sir db 1Ah, 1, 8, 2, 4, 10h, 0F4h, 20h, 9
   len equ $-sir
   sir2 times len db 0
   max dw 0 
   ratie dw 1
   ratie_buna resw 1
   nr dw 0
   t db 0
   mem dw 0
   lungime dd 0
   format db '%x',0   

segment code use32 class=code
    start:
        mov eax, len
        mov [lungime], eax
        mov bl,0
              
        sortare:
            cmp bl, 1
            je final
            mov bl, 1
            mov ecx, [lungime]
            dec ecx
            mov esi, sir
            sort:
                mov al, [esi]
                mov dl, [esi+1]
                cmp al, dl
                jle peste
                mov [esi], dl
                mov [esi+1], al
                mov bl, 0
                peste:
                inc esi
            loop sort
        jmp sortare
                
        
        final:
        ;am sirul ordonat crescator
  
        
        mov edi,sir2
        mov edx,0
        mov ax,0
        
        repeta:
                        dec byte [lungime]
                        mov esi,sir
                        add esi,edx
                        cmp edx,[lungime]
                        je terminat
                        inc byte [lungime]
                        lodsb
                        mov bl,al
                        inc edx
                        mov byte[t],0
                                
                        while1:
                              mov ecx,edx
                              add cl,[t]
                              inc byte[t]
                              cmp ecx, [lungime]
                              je repeta
                              for1: 
                                 
                                cmp ecx,[lungime]
                                je while1
                                mov esi,[sir+edx]
                                lodsb
                                div bl
                                cmp ah,0
                                jne da
                                mov byte [mem],al
                                cmp word[ratie],1
                                jne bun
                                mov [ratie],al
                                mov al,bl
                                stosb
                            bun: 
                             cmp word [mem],[ratie]
                             jne continua
                             inc word [nr]
                             dec esi
                             movsb
                             cmp word [nr],[max]
                             jle continua
                             mov word [max],nr
                             mov word [ratie_buna],ratie
                  continua:
                  cmp word[mem],ratie
                  jnl da
                  mov word [nr],0
                  mov edi,sir2
                  mov ecx,[lungime]
                  da:
                  jmp for1
                  
        terminat:          
                     
              
        push dword 0      
        call [exit]       
              
                   